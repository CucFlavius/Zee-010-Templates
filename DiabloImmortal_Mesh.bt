//------------------------------------------------
//      File: DiabloImmortal_Mesh
//   Authors: Zee
//   Version: 2.0
//   Purpose: Reading the mesh file from Diablo Immortal (Messiah Engine)
//  Category: DiabloImmortal
//------------------------------------------------
#include "Lib/Common.bt"

struct BUF_DESCRIPTION
{
    ushort strSize;
    STRINGc description(strSize);
};

struct SUBMESH_SECTION
{
    uint indexStart;                                // Starting vertex number.
    uint indexCount;                                // Number of vertices.
    uint vertexStart;                               // Starting triangle index
    uint vertexCount;                               // Number of triangle indices.
};

struct SUBMESH_BOUNDS
{
    BOUNDINGBOX boundingBox;                        // Probably
    BOUNDINGCAPSULE boundingCapsule;                // Probably
};

int bufferMatch(char m[], char s[], int sizeA, int sizeB)
{
    if (sizeA != sizeB)
        return 0;

    local int i;
    local int similar = 1;
    for (i = 0; i < sizeA; i++)
    {
        if (m[i] != s[i])
            similar = 0;
    }

    return similar;
}

struct VERTEX_BUFFER(char description[], int size)
{
    if ( bufferMatch( "P3F_N4B_T2F", description, 11, size ) )
    {
        VECTOR3 position;
        VECTOR4SMALL normal;                                 // Packed normal 
        VECTOR2 uv;
    }
    else if( bufferMatch( "T4H_B4H", description, 7, size ) )
    {
        VECTOR4H tangent;
        VECTOR4H bitangent;
    }
    else if( bufferMatch( "W4B_I4B", description, 7, size ) )
    {
        ubyte boneWeights[4];
        ubyte boneIndices[4];
    }
    else if( bufferMatch( "P3F", description, 3, size ) )
    {
        VECTOR3 position;
    }
    else if( bufferMatch( "P3H", description, 3, size ) )
    {
        VECTOR4H position;
    }
    else if( bufferMatch( "Q4H_T2H", description, 7, size ) )
    {
        VECTOR4H tangentAsQuat;
        VECTOR2H uv;
    }
    else
    {
        // Idk
        Printf("Unknown Buffer Format");
    }
};

byte version;                                       // Probably version, always 46 ?
STRINGc messiah(7);                                 // MESSIAH
int unkown0;                                        // Always 8 ?
uint dataSize;                                      // Data size after bounding box
ushort unknown1;                                    // Always 0 ?
ushort submeshCount;                                // Number of submeshes
uint vertexCount;                                   // Number of vertices
uint indexCount;                                    // Number of indices
BUF_DESCRIPTION bDescriptions[4]<optimize=false>;   // Vertex buffer description strings
BOUNDINGBOX boundingBox;                            // Bounding box
BOUNDINGSPHERE_B boundingSphere;                    // Bounding sphere
SUBMESH_SECTION submeshSections[submeshCount];      // Submesh index info
ushort indices[indexCount];                         // Triangle indices
VERTEX_BUFFER buffer0(bDescriptions[0].description.s, bDescriptions[0].strSize)[vertexCount];
VERTEX_BUFFER buffer1(bDescriptions[1].description.s, bDescriptions[1].strSize)[vertexCount];
VERTEX_BUFFER buffer2(bDescriptions[2].description.s, bDescriptions[2].strSize)[vertexCount];
if (bDescriptions[3].description.s != "None")
    VERTEX_BUFFER buffer3(bDescriptions[3].description.s, bDescriptions[3].strSize);
SUBMESH_BOUNDS submeshBounds[submeshCount];         // Per submesh bounds