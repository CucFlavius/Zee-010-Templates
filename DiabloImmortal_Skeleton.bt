//------------------------------------------------
//      File: DiabloImmortal_Skeleton
//   Authors: Zee
//   Version: 1.0
//   Purpose: Reading the skeleton from Diablo Immortal (Messiah Engine)
//  Category: DiabloImmortal
//------------------------------------------------

// The format is basicly a compressed tree structure
// The hierarchy is harder to explain, basicly the data is read in order based on child count but in depth order,
// so you read the root (level 0), then the child elements (level 1), then each of the child element of those childs (level 2) etc

#include "Lib/Common.bt"

typedef struct
{
    byte zero;
    byte type;       // Data type ? 

    if (type == 0)
    {
        // Element
    }
    if (type == 1)
    {
        // String
        string s;
    }
    else if (type == 2 || type == 4)
    {
        // Number
        ushort u;
        ushort unk;
    }
    else if (type == 5)
    {
        // Float
        float f;
    }
    else if (type == 3)
    {
        // Boolean
        byte u;
    }
    else if (type == 6)
    {
        Printf("6");
    }
    else
    {
        string s;
    }

} Element <name = ElementName, bgcolor = cLtYellow>;


string ElementName(Element &e)
{
    if (e.type == 0)
    {
        return "Element";
        // unused
    }
    else if (e.type == 1)
    {
        if (Strlen(e.s) > 0)
            return "String : " + e.s;
        else
            return "String : ";
    }
    else if (e.type == 2 || e.type == 4)
    {
        local string s;
        SPrintf( s, "%d", e.u );
        return "Uint : " + s;
    }
    else if (e.type == 5)
    {
        local string s;
        SPrintf( s, "%f", e.f );
        return "Float : " + s;
    }
    else if (e.type == 3)
    {
        local string s;
        SPrintf( s, "%d", e.u );
        return "Bool : " + s;
    }
    else
    {
        return "";
    }
}

struct Dictionary (int count)
{
    STRING entries[count]<optimize=false>;
};

typedef byte Name <read=DictionaryName>;

string DictionaryName(Name &name)
{
    return dictionary.entries[name].s;
};

typedef struct
{
    byte inData[4]<hidden=true>;
    FSeek(FTell() - 4);

    if (!(inData[0] & 128))
    {
        FSeek(FTell() + 1);
        local uint value = inData[0];
    }
    else
    {
        FSeek(FTell() + 2);
        local uint value = inData[0] & 127 | ((inData[1] & 127) << 7);
    }
}cValue<read=cValueRead>;

string cValueRead(cValue &v)
{
    local string s;
    SPrintf( s, "%u", v.value );
    return s;
}

typedef struct
{
    Name name<bgcolor=cRed>;
    cValue arraySize<bgcolor=cLtRed>;
}Descriptor<read=DescriptorRead>;

string DescriptorRead(Descriptor &descriptor)
{
    local string s;
    SPrintf( s, "%u", descriptor.arraySize.value );
    //return descriptor.name + s;
    return dictionary.entries[descriptor.name].s + " " + s;
};

struct DESCRIPTORS(int count)
{
    Descriptor descriptors[count]<optimize=false>;
};

struct ELEMENTS(int count)
{
    Element elements[count]<optimize=false>;
};

char magic[4]<bgcolor=cBlue>;
int fileSize<bgcolor=cLtPurple>;
int zero0;
ubyte dictEntryCount<bgcolor=0x32a8a6>;
Dictionary dictionary(dictEntryCount)<bgcolor=0x32a8a6>;
byte zero<hidden=true>;

uint dataStartOffset;
uint zero;

cValue elementCount;
DESCRIPTORS descriptors(elementCount.value);
ELEMENTS elements(elementCount.value);