//------------------------------------------------
//      File: Wildstar_I3.bt
//   Authors: Zee
//   Version: 1.0
//   Purpose: Reading the wildstar model file format I3
//  Category: Wildstar
//------------------------------------------------

#include "Lib/Common.bt"
#include "Wildstar/Array.bt"

local int headerSize = 368;

struct BoundingBox
{
    VECTOR4 min;
    VECTOR4 max;
};

struct Header
{
	char magic[4];          // IDEF
	uint32 version;         // 41
	Gap g(24);
	M3ARRAY arrSectors;
	M3ARRAY arrPortals;
	M3ARRAY arrPasses;
	M3ARRAY unk1; // 2 bytes per entry
	M3ARRAY unk2; // 64 bytes per entry
	M3ARRAY unk3; // 40 bytes per entry
	M3ARRAY arrLights; // 176 bytes per entry
	M3ARRAY unk5; // 32 bytes per entry
	M3ARRAY unk6; // 64 bytes per entry
	M3ARRAY unk7; // 2 bytes per entry
	M3ARRAY unk8; // 56 bytes per entry
	M3ARRAY unk9; // 8 bytes per entry
	M3ARRAY unk10;// 2 bytes per entry
	M3ARRAY unk11; // 2 bytes per entry
	M3ARRAY unk12; // 4 bytes per entry
	M3ARRAY unk13; // 4 bytes per entry
	M3ARRAY unkStringTable;
	M3ARRAY stringOffsets;
	BoundingBox bb;
	uint64 unkVals[2];
};

struct Sector
{
	uint64 nameIndex;
	Gap g(8);
	BoundingBox bb;
	uint unk;               // 0, 1
	Gap g(12);
};

struct Portal(int portalsEnd)
{
	uint32 nameIndex;
                            // This could be portal name index in the name table, needs verifying
	ushort sectorIndexA;    // 0 .. 39
    ushort sectorIndexB;    // 0 .. 39
	Gap g(8);
	BoundingBox boundsA;        // same for all portals, seems to be for whole model
	PLANE plane;
	M3ARRAY verticesArray;       // float[3] (mostly float[2] with one float == 0 as portals are axis aligned), uint32 always 0
	M3ARRAY indicesArray;        // points to 2 byte values, relative to sizeof(I3Header) + header.ofsUnk1 + header.nUnk1 * sizeof(Unk1Entry)
	BoundingBox boundsB;
	Gap g(8);
	float side;             // -1, 1 (and also 0.999999 -0.999999 etc)
	float unk1;             // -0 always

    local int save = FTell();

    if (verticesArray.elements > 0)
    {
        FSeek(portalsEnd + verticesArray.offset);
        VECTOR4 vertices[verticesArray.elements]<bgcolor=cGreen, optimize=false>;
    }
    if (indicesArray.elements > 0)
    {
        FSeek(portalsEnd + indicesArray.offset);
        short indices[indicesArray.elements]<bgcolor=cLtGreen, optimize=false>;
    }

    FSeek(save);
};

struct FloatTrack(int end)
{
    M3DOUBLEARRAY offset;

    local long save = FTell();

    FSeek(offset.offsetA + end);
    int test;

    FSeek(save);
};

struct Pass(int passEnd)
{
    struct UnkPassData0(int unkPassData0End)
    {
        struct PassUnk0A(int unkPassData0AEnd)
        {
	        uint16 colorTexUnitIndex;       // 0 .. 114
            uint16 normalTexUnitIndex;      // 1 .. 113
	        uint unk0;                      // 0, 1, 3, 5
            uint unk1;                      // 0, 1, 3, 5, 6
            uint unk2;                      // 0, 1, 2, 3, 5
            uint unk3;                      // 0, 1, 2, 3, 5, 6
            uint unk4;                      // 0, 1, 3, 4, 5, 6
            Gap g(24);                      // Unused track
            Track unkTrack0(TFloat, unkPassData0AEnd);
            Track unkTrack1(TFloat, unkPassData0AEnd);
            Track unkTrack2(TFloat, unkPassData0AEnd);
            Track unkTrack3(TFloat, unkPassData0AEnd);
            Gap g(4);
	        uint unk5;                      // 0, 1
            uint unk6;                      // 0, 1
            uint unk7;                      // 0, 1
            uint unk8;                      // 0, 1
            Gap g(4);
            Track unkTrack4(TFloat, unkPassData0AEnd);
            Track unkTrack5(TFloat, unkPassData0AEnd);
            Track unkTrack6(TFloat, unkPassData0AEnd);
            Track unkTrack7(TFloat, unkPassData0AEnd);
            Track unkTrack8(TFloat, unkPassData0AEnd);
	        uint unk9;                      // 2, 3, 4, 5, 6
            uint unk10;                     // 0 .. 22
        };

        Gap g(4);
	    uint unk0;      // 0, 2, 3, 4, 6, 12, 8192, 24576, 24578, 24580, 24582
        uint unk1;      // 0, 1, 2, 3, 4, 5, 6, 8, 10
        uint unk2;      // 0, 1, 2, 3, 4, 6, 7
        uint unk3;      // 0 .. 68
        uint unk4;      // 0 .. 68
	    M3ARRAY arrUnk0A;
    
        local int save = FTell();
    
        if (arrUnk0A.elements > 0)
        {
            local int unkPassData0ACount = arrUnk0A.elements;
            local int fileUnkPassData0AOffset = unkPassData0End + arrUnk0A.offset;
            local int unkPassData0AEnd = fileUnkPassData0AOffset + ((296 * unkPassData0ACount + 15) & 0xFFFFFFFFFFFFFFF0);
            FSeek(fileUnkPassData0AOffset);
            PassUnk0A unk221(unkPassData0AEnd)[arrUnk0A.elements]<bgcolor=cLtGreen, optimize=false>;
        }
    
        FSeek(save);
    };
    
    struct TextureUnits(int textureUnitsEnd)
    {
	    int16 unk0;             // -1, 1, 2
	    uint16 flags;           // 0,1 probably, 0 -> color texture, 1 -> normal texture
	    uint32 unk1;            // 0, 1, 3, 4, 5, 21
	    float unk2;             // 0.0 .. 0.5 ish
	    Gap g(4);
	    M3ARRAY texturePathArray;
    
        local int save = FTell();
    
        FSeek(textureUnitsEnd + texturePathArray.offset);
        wchar_t name[texturePathArray.elements]<bgcolor=cYellow>;
    
        FSeek(save);
    };
    
    // READ //

    Gap g(4);
	uint32 unk;            // 0, 1, 2, 40, 41 ... 107 (flags?)
	M3ARRAY nameArray;
	M3ARRAY unk1Array;      // -> 40 bytes struct
	M3ARRAY unk2Array;      // -> short
	M3ARRAY texUnitsArray;  // -> 32 byte struct
	M3ARRAY unk3Array;      // -> short, unused

    local int save = FTell();

    FSeek(passEnd + nameArray.offset);
    wchar_t name[nameArray.elements]<bgcolor=cYellow>;

    if (unk1Array.elements > 0)
    {
        local int unkPassData0Count = unk1Array.elements;
        local int fileUnkPassData0Offset = passEnd + unk1Array.offset;
        local int unkPassData0End = fileUnkPassData0Offset + ((40 * unkPassData0Count + 15) & 0xFFFFFFFFFFFFFFF0);
        FSeek(fileUnkPassData0Offset);
        UnkPassData0 unkData0(unkPassData0End)[unkPassData0Count]<bgcolor=cGreen, optimize=false>;
    }
    if (unk2Array.elements > 0)
    {
        // -1, 0, 1, 2 .. 12
        local int unk2ArrayCount = unk2Array.elements;
        local int fileUnk2ArrayOffset = passEnd + unk2Array.offset;
        FSeek(fileUnk2ArrayOffset);
        short unkData1[unk2ArrayCount]<bgcolor=cRed, optimize=false>;
    }
    if (texUnitsArray.elements > 0)
    {
        local int textureUnitsCount = texUnitsArray.elements;
        local int fileTextureUnitsOffset = passEnd + texUnitsArray.offset;
        local int textureUnitsEnd = fileTextureUnitsOffset + ((32 * textureUnitsCount + 15) & 0xFFFFFFFFFFFFFFF0);
        FSeek(fileTextureUnitsOffset);
        TextureUnits textureUnits(textureUnitsEnd)[textureUnitsCount]<bgcolor=cBlue, optimize=false>;
    }
    if (unk3Array.elements > 0)
    {
        // Unused
        local int unk3ArrayCount = unk3Array.elements;
        local int fileUnk3ArrayOffset = passEnd + unk3Array.offset;
        FSeek(fileUnk3ArrayOffset);
        short unkData2[unk3ArrayCount]<bgcolor=cPurple, optimize=false>;
    }
    FSeek(save);
};

struct Unk1Data
{
    byte data[2];
};

struct Unk2Data
{
    int unk0;               // 2 .. 202 (index into something)
    int unk1;               // 3 .. 95 (index into something)
    Gap g(8);
    VECTOR4 position;
    VECTOR4 scale;
    QUATERNION rotation;

    Printf("%i,", unk0);
};

struct Unk3Data(int unk3End)
{
	Gap g(8);
	M3ARRAY nameArray;
	M3ARRAY unk0Array;

    local int save = FTell();

    local int nameArrayCount = nameArray.elements;
    local int fileNameArrayOffset = unk3End + nameArray.offset;
    FSeek(fileNameArrayOffset);
    wchar_t passName[nameArrayCount]<bgcolor=cYellow>;

    if (unk0Array.elements > 0)
    {
        local int unk0ArrayCount = unk0Array.elements;
        local int fileUnk0ArrayOffset = unk3End + unk0Array.offset;
        FSeek(fileUnk0ArrayOffset);
        short unkData0[unk0ArrayCount]<bgcolor=cGreen, optimize=false>;
    }

    FSeek(save);
};

struct Light
{
    int nameIndex;
    Gap g(12);
    VECTOR4 position;
    VECTOR4 scale;
    QUATERNION rotation;
    int unk0;               // 0, 1, 2, 3, 4, 5, 6, 7, 12
    int unk1;               // -1
    int unk2;               // 0, 2, 3, 4
    int unk3;               // -1
    Gap g(16);
    VECTOR4 vec0;
    VECTOR4 vec1;
    VECTOR4 vec2;
    VECTOR4 vec3;
    Gap g(16);
};

struct Unk5Data
{
    byte data[32];
};

struct Unk6Data
{
    byte data[64];
};

struct Unk101Entry
{
	float vertex1[3];
	float vertex2[3];
	float vertex3[3];
	float vertex4[4];
};

struct Unk8Data
{
	uint64 various1[3];
	M3ARRAY Unk101;
	M3ARRAY Unk102;
};

struct Unk9Data
{
    byte data[8];
};

struct Unk10Data
{
    byte data[2];
};

struct Unk11Data
{
    byte data[2];
};

struct Unk12Data
{
    byte data[4];
};

struct Unk13Data
{
    byte data[4];
};

Header header<bgcolor = cRed>;
if (header.arrSectors.elements > 0)
{
    FSeek(headerSize + header.arrSectors.offset);
    Sector sectors[header.arrSectors.elements]<bgcolor=cPurple, optimize=false>;
}
if (header.arrPortals.elements > 0)
{
    local int portalCount = header.arrPortals.elements;
    local int filePortalsOffset = headerSize + header.arrPortals.offset;
    local int portalsEnd = filePortalsOffset + ((144 * portalCount + 15) & 0xFFFFFFFFFFFFFFF0);
    FSeek(filePortalsOffset);
    Portal portals(portalsEnd)[portalCount]<bgcolor=cLtRed, optimize=false>;
}
if (header.arrPasses.elements > 0)
{
    local int passCount = header.arrPasses.elements;
    local int filePassesOffset = headerSize + header.arrPasses.offset;
    local int passEnd = filePassesOffset + ((88 * passCount + 15) & 0xFFFFFFFFFFFFFFF0);
    FSeek(filePassesOffset);
    Pass passes(passEnd)[passCount]<optimize=false>;
}
if (header.unk1.elements > 0)
{
    // Unused
    FSeek(headerSize + header.unk1.offset);
    Unk1Data unk1[header.unk1.elements]<optimize=false>;
}
if (header.unk2.elements > 0)
{
    FSeek(headerSize + header.unk2.offset);
    Unk2Data unk2[header.unk2.elements]<bgcolor = cLtYellow, optimize=false>;
}
if (header.unk3.elements > 0)
{
    local int unk3Count = header.unk3.elements;
    local int fileUnk3Offset = headerSize + header.unk3.offset;
    local int unk3End = fileUnk3Offset + ((40 * unk3Count + 15) & 0xFFFFFFFFFFFFFFF0);
    FSeek(fileUnk3Offset);
    Unk3Data unk3(unk3End)[unk3Count]<optimize=false>;
}
if (header.arrLights.elements > 0)
{
    FSeek(headerSize + header.arrLights.offset);
    Light lights[header.arrLights.elements]<bgcolor = cLtPurple, optimize=false>;
}
if (header.unk5.elements > 0)
{
    FSeek(headerSize + header.unk5.offset);
    Unk5Data unk5[header.unk5.elements]<optimize=false>;
}
if (header.unk6.elements > 0)
{
    FSeek(headerSize + header.unk6.offset);
    Unk6Data unk6[header.unk6.elements]<optimize=false>;
}
if (header.unk7.elements > 0)
{
    FSeek(headerSize + header.unk7.offset);
    short unk7[header.unk7.elements]<optimize=false>;
}
if (header.unk8.elements > 0)
{
    FSeek(headerSize + header.unk8.offset);
    Unk8Data unk8[header.unk8.elements]<optimize=false>;
}
if (header.unk9.elements > 0)
{
    FSeek(headerSize + header.unk9.offset);
    Unk9Data unk9[header.unk9.elements]<optimize=false>;
}
if (header.unk10.elements > 0)
{
    FSeek(headerSize + header.unk10.offset);
    Unk10Data unk10[header.unk10.elements]<optimize=false>;
}
if (header.unk11.elements > 0)
{
    FSeek(headerSize + header.unk11.offset);
    Unk11Data unk11[header.unk11.elements]<optimize=false>;
}
if (header.unk12.elements > 0)
{
    FSeek(headerSize + header.unk12.offset);
    Unk12Data unk12[header.unk12.elements]<optimize=false>;
}
if (header.unk13.elements > 0)
{
    FSeek(headerSize + header.unk13.offset);
    Unk13Data unk13[header.unk13.elements]<optimize=false>;
}

if (header.unkStringTable.elements > 0)
{
    FSeek(headerSize + header.unkStringTable.offset);
    wchar_t stringTable[header.unkStringTable.elements]<bgcolor=cLtGray, hidden=true, optimize=false>;
}
if (header.stringOffsets.elements > 0)
{
    FSeek(headerSize + header.stringOffsets.offset);
    int stringOffsets[header.stringOffsets.elements]<hidden=true, optimize=false>;

    local int i = 0;
    local int sStart;
    local int sEnd;
    for (i = 0; i < header.stringOffsets.elements; i++)
    {
        sStart = stringOffsets[i] * 2;
        if (i == header.stringOffsets.elements - 1)
            sEnd = header.unkStringTable.elements * 2;
        else
            sEnd = stringOffsets[i + 1] * 2;
    
        FSeek(headerSize + header.unkStringTable.offset + sStart);
        WSPATH name(sEnd - sStart);
    }
}
