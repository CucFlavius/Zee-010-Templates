//------------------------------------------------
//      File: DiabloImmortal_Material
//   Authors: Zee
//   Version: 1.0
//   Purpose: Reading material data used to render models
//  Category: DiabloImmortal
//------------------------------------------------
//#include "Lib/Common.bt"
typedef struct (int size)
{
    char s[size];
} STRINGc <name = StringCName>;

string StringCName(STRINGc &str)
{
    if (Strlen(str.s) > 0)
        return "String : " + str.s;
    else
        return "";
}

typedef struct
{
    ushort strSize;
    char s[strSize];
} STRINGd <name = StringDName>;

string StringDName(STRINGd &str)
{
    if (Strlen(str.s) > 0)
        return "String : " + str.s;
    else
        return "";
}


enum<byte> EShaderGraphType
{
    PBR = 0,
    Unlit = 1,
    Particle = 2,
    Effect = 3,
    Decal = 4,
    PostProcess = 5,
    UI = 6,
    Function = 7,
};

struct MATERIAL
{
    STRINGd materialName;
    STRINGd shaderName;
    EShaderGraphType type;
    byte handwritten;
    ushort unk;
    ushort sizeOfProperties;
    STRINGc properties(sizeOfProperties);
};

struct Submaterial
{
    STRINGd fileName;
    STRINGd shaderName;
    ushort unk1;
    ushort unk2;
    ushort sizeOfProperties;
    STRINGc properties(sizeOfProperties);
};

struct MATERIALb
{
    //time_t creationTime;
    STRINGd materialName;
    byte submatCount;
    Submaterial mSubMaterials[submatCount]<optimize=false>;
};

byte version;                                       // Probably version, always 46 ?
STRINGc messiah(7);                                 // MESSIAH
uint one;
ushort zero;

if (zero == 0)
{
    byte numberOfMaterials;
    MATERIAL materials[numberOfMaterials]<optimize=false>;
}
else
{
    FSeek(FTell() - 2);
    MATERIALb material;
    //MATERIAL material;
}
