//------------------------------------------------
// Group header chunk
// IMPORTANT: This chunk contains all other chunks! The following variables are a header only. The MOGP chunk size will be way more than the header variables!
//------------------------------------------------

struct MOGP
{
    CHUNK hdr;
    uint32 groupName;                   // offset into MOGN
                                        // If a group wmo is named "antiportal", CMapObjGroup::CreateOccluders() is called and group flags 0x4000000 and 0x80 are set automatically in both, MOGP and MOGI.
                                        // Also, the BSP tree is cleared and batch_count[interior] and [exterior] is set to 0. If flags & 0x4000000 is set, just CMapObjGroup::CreateOccluders() is called, without setting flags or clearing bsp.
    uint32 descriptiveGroupName;        // offset into MOGN
    GROUPFLAGS flags;                   // Flags: always contain more information than flags in MOGI. 
                                        // I suppose MOGI only deals with topology/culling,
                                        // while flags here also include rendering info.
    BOUNDINGBOX boundingBox;            // as with flags, same as in corresponding MOGI entry
    uint16 portalStart;                 // index into MOPR
    uint16 portalCount;                 // number of MOPR items used after portalStart
                                        // The fields referenced from the MOPR chunk indicate portals leading out of the WMO group in question.
    uint16 transBatchCount;
    uint16 intBatchCount;
    uint16 extBatchCount;
                                        // For the "Number of batches" fields, transBatchCount + intBatchCount + extBatchCount == the total number
                                        // of batches in the WMO group (in the MOBA chunk). This might be some kind of LOD thing, or just separating
                                        // the batches into different types/groups…?
    uint16 padding_or_batch_type_d;     // probably padding, but might be data?
    
    unsigned byte fogIds[4];            // ids in MFOG
    uint32 groupLiquid;                 // see below in the MLIQ chunk
    uint32 uniqueID;                    // WMOAreaTableRec::m_WMOGroupID
    GROUPFLAGS2 flags2;
    int16 parentOrFirstChildSplitGroupIndex;    //See Split Groups
    int16 nextSplitChildGroupIndex;
};

/*
void CMapObjGroup::CreateOccluders()
{
  for ( unsigned int mopy_index (0), movi_index (0)
      ; mopy_index < this->mopy_count
      ; ++mopy_index, ++movi_index
      ) 
  {
    C3Vectorⁱ* points[3] = 
      { &this->m_vertices[this->movi[3*mopy_index + 0]]
      , &this->m_vertices[this->movi[3*mopy_index + 1]]
      , &this->m_vertices[this->movi[3*mopy_index + 2]]
      };

    float avg ((points[0]->z + points[1]->z + points[2]->z) / 3.0); 

    unsigned int two_points[2];
    unsigned int two_points_index (0);

    for (unsigned int i (0); i < 3; ++i)
    {
      if (points[i]->z > avg)
      {
        two_points[two_points_index++] = i;
      }
    }

    if (two_points_index > 1)
    {
      CMapObjOccluder* occluder (CMapObj::AllocOccluder());
      occluder->p1 = points[two_points[0]];
      occluder->p2 = points[two_points[1]];

      append (this->occluders, occluder);
    }
  }
}
*/

/*
Split Groups
First spotted in 9.2.0 Split groups is a new mechanic, which makes parent-child relation between Group WMOs. There is "Parent Split" Group and "Child Split" Groups, that be belong to Parent. From the way the data is organized right now, it's not possible for a "Child Split" Group to be a "Parent Split" for other Group WMOs. So this graph can have only one level of depth.


Essentially "Child Split" Group do not have Portals leading to them. Instead all portals leading in and out are connected to "Parent Split". So portal culling algorithm needs to render "Child Split" Groups, when "Parent Split" passes Portal culling test.


How it works:


if SMOGroupFlags2.isSplitGroupParent flag is set, the group is marked as "Parent Split" Group. In this case MOGP.parentOrFirstChildSplitGroupIndex is a group index of first "Split Child" Group and MOGP.nextSplitChildGroupIndex is set to -1 (at least as of current observations).


For "Split Child" SMOGroupFlags2.isSplitGroupParent is not set and SMOGroupFlags2.isSplitGroupChild is set instead. In this case MOGP.parentOrFirstChildSplitGroupIndex is index of "Parent Split" Group to which this "Split Child" belongs to, and MOGP.nextSplitChildGroupIndex is group index of next "Split Child" in the list.


So to get all "Split Child" for particular "Parent Split", one would need to take MOGP.parentOrFirstChildSplitGroupIndex of "Parent Split" and go through chain of referencing MOGP.nextSplitChildGroupIndex, while MOGP.nextSplitChildGroupIndex is not -1


For earliest known example of WMO with such mechanic, see FDID 4217818
*/