//------------------------------------------------
// Wow arrays
//------------------------------------------------

void T_resolve_extra (int T)
{
  switch (T)
  {
/*
    case T_M2Attachment: M2Attachment _; break;
    case T_M2Bone: M2Bone _; break;
    case T_M2Camera: M2Camera _; break;
    case T_M2Color: M2Color _; break;
    case T_M2CompQuat: M2CompQuat _; break;
    case T_M2Event: M2Event _; break;
    case T_M2Light: M2Light _; break;
    case T_M2Material: M2Material _; break;
    case T_M2Particle: M2Particle _; break;
    case T_M2Ribbon: M2Ribbon _; break;
    case T_M2Sequence: M2Sequence _; break;
    case T_M2SkinProfile : M2SkinProfile _; break;
    case T_M2SplineKey: M2SplineKey _; break;
    case T_M2Texture: M2Texture _; break;
    case T_M2TextureTransform: M2TextureTransform _; break;
    case T_M2TextureWeight: M2TextureWeight _; break;
    case T_M2Vertex: M2Vertex _; break;
*/
    default: Assert (false);
  }
}

string T_print_extra (int T)
{
  switch (T)
  {
    case T_M2Attachment: return "M2Attachment";
    case T_M2Bone: return "M2Bone";
    case T_M2Camera: return "M2Camera";
    case T_M2Color: return "M2Color";
    case T_M2CompQuat: return "M2CompQuat";
    case T_M2Event: return "M2Event";
    case T_M2Light: return "M2Light";
    case T_M2Material: return "M2Material";
    case T_M2Particle: return "M2Particle";
    case T_M2Ribbon: return "M2Ribbon";
    case T_M2Sequence: return "M2Sequence";
    case T_M2SkinProfile: return "M2SkinProfile";
    case T_M2SplineKey: return "M2SplineKey";
    case T_M2Texture: return "M2Texture";
    case T_M2TextureTransform: return "M2TextureTransform";
    case T_M2TextureWeight: return "M2TextureWeight";
    case T_M2Vertex: return "M2Vertex";
    default: Assert (false);
  }
}

typedef struct
{
  uint32 data;
} bitmask<read=bitmaskread, optimize=false, size=4>;

string bitmaskread(bitmask& mask)
{
  string a;
  int i = 0;
  for (i = 0; i < 32; ++i)
  {
    if (mask.data & (1<<i))
    {
      SPrintf (a, "%s1", a);
    }
    else
    {
      SPrintf (a, "%s0", a);
    }
  }
  return a;
}

enum
{
  T_bitmask,
  T_char,
  T_C2IVector,
  T_C2Vector,
  T_C3sVector,
  T_C3Vector,
  T_C44Matrix,
  T_C4Plane,
  T_C4Quaternion,
  T_C4Vector,
  T_CAaBox,
  T_CArgb,
  T_CHUNK,
  T_CHUNK_header,
  T_CHUNK_MAGIC,
  T_int16_t,
  T_int24_t,
  T_int32_t,
  T_int64_t,
  T_int8_t,
  T_localized_stringref,
  T_stringref,
  T_uint16_t,
  T_uint32_t,
  T_uint32_t_BE,
  T_uint40_t_BE,
  T_uint64_t,
  T_uint8_t,
  T_float,

  T_extra_begin,
};

void T_resolve (int t)
{
  switch (t)
  {
  case T_bitmask: bitmask _; break;
  case T_char: char _; break;
  //case T_C2IVector: VECTOR2INT _; break;
  case T_C2Vector: VECTOR2 _; break;
  //case T_C3sVector: C3sVector _; break;
  case T_C3Vector: VECTOR3 _; break;
  case T_C44Matrix: MATRIX4x4 _; break;
  //case T_C4Plane: PLANE _; break;
  case T_C4Quaternion: QUATERNION _; break;
  case T_C4Vector: VECTOR4 _; break;
  case T_CAaBox: BOUNDINGBOX _; break;
  //case T_CArgb: ARGB _; break;
  case T_CHUNK: CHUNK _; break;
  //case T_CHUNK_header: CHUNK_header _; break;
  //case T_CHUNK_MAGIC: CHUNK_MAGIC _; break;
  case T_int16_t: int16 _; break;
  //case T_int24_t: int24 _; break;
  case T_int32_t: int32 _; break;
  case T_int64_t: int64 _; break;
  //case T_int8_t: int8 _; break;
  //case T_localized_stringref: localized_stringref _; break;
  //case T_stringref: stringref _; break;
  case T_uint16_t: uint16 _; break;
  case T_uint32_t: uint32 _; break;
  //case T_uint32_t_BE: uint32_t_BE _; break;
  //case T_uint40_t_BE: uint40_t_BE _; break;
  case T_uint64_t: uint64 _; break;
  case T_uint8_t: byte _; break;
  case T_float: float _; break;
  default: T_resolve_extra (t); break;
  }
}

string T_array_read (int t, int size, int offset)
{
  switch (t)
  {
  case T_char: return ReadString (offset, size); break;
  case T_uint32_t:
    {
      int i;
      string s;
      if (size != 0)
      {
        SPrintf (s, "%s%u", s, ReadUInt (offset));
      }
      for (i = 1; i < size; ++i)
      {
        SPrintf (s, "%s, %u", s, ReadUInt (offset + i * 4));
      }
      return s;
    }
  case T_uint16_t:
    {
      int i;
      string s;
      if (size != 0)
      {
        SPrintf (s, "%s%u", s, ReadUShort (offset));
      }
      for (i = 1; i < size; ++i)
      {
        SPrintf (s, "%s, %u", s, ReadUShort (offset + i * 2));
      }
      return s;
    }
  case T_int16_t:
    {
      int i;
      string s;
      if (size != 0)
      {
        SPrintf (s, "%s%i", s, ReadShort (offset));
      }
      for (i = 1; i < size; ++i)
      {
        SPrintf (s, "%s, %i", s, ReadShort (offset + i * 2));
      }
      return s;
    }
  case T_float:
    {
      int i;
      string s;
      if (size != 0)
      {
        SPrintf (s, "%s%f", s, ReadFloat (offset));
      }
      for (i = 1; i < size; ++i)
      {
        SPrintf (s, "%s, %f", s, ReadFloat (offset + i * 4));
      }
      return s;
    }
  }

  return "<" + T_print (t) + ">";
}

typedef struct (int T, int startPos_)
{
    uint32 num<hidden=true>;
    uint32 offs<hidden=true>;
    
    local int _T = T;
    local int c = FTell();
    local int startPos = startPos_;
    FSeek (offs + startPos);
    local uint32 i;
    for (i = 0; i < num; ++i)
    {
        T_resolve (T);
    }
    FSeek (c);
} M2Array<read=readM2Array>;

string readM2Array (M2Array& a)
{
    string s; SPrintf (s, "%u [%s]", a.num, T_array_read (a._T, a.num, a.offs + a.startPos)); return s;
}