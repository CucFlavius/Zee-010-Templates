//------------------------------------------------
//      File: Wildstar_Tbl.bt
//   Authors: Zee
//   Version: 1.0
//   Purpose: Reading the wildstar tbl database file format
//  Category: Wildstar
//------------------------------------------------

#include "Lib/Common.bt"

local int HeaderSize = 96;

void Align(int alignment)
{
    local int loc = FTell();
    local int pad = (alignment - (loc % alignment));
    if (pad != 0 && pad < alignment)
    {
        FSkip(pad);
    }
};

struct Header
{
    char magic[4];  // DTBL
    int version;
    uint tableNameLength;
    int padding;
    uint64 unk0;
    uint recordSize;
    int padding;
    uint64 fieldCount;
    uint64 fieldOffset;
    uint recordCount;
    int padding;
    uint64 totalRecordSize;
    uint64 recordOffset;
    uint64 maxID;
    uint64 lookupOffset;
    int64 padding;
    char name[(tableNameLength - 1) * 2];
};

struct Column
{
    uint nameLength;
    uint unk0;
    uint64 nameOffset;
    ushort dataType;
    ushort padding;
    uint unk1;
    local long save = FTell();
    local long offset = (long)(HeaderSize + header.fieldCount * 24 + header.fieldOffset + nameOffset);
    FSeek((header.fieldCount % 2 == 0) ? offset : (offset + 8));
    wchar_t name[nameLength];
    FSeek(save);
};

local int recIndex = 0;

typedef struct
{
    while(true)
    {
        byte peek<hidden=false>;
        if (peek != 0)
        {
            FSkip(-1);
            break;
        }
    }

    wstring data;
}WString<name="String", read=READWString>;

string READWString( WString &s )
{
    return s.data;
}

local int i;
struct Record(Header &header)
{
    FSeek(HeaderSize + header.recordOffset + (header.recordSize * recIndex));
    local int save;
    for (i = 0; i < header.fieldCount; i++)
    {
        switch(columns[i].dataType)
        {
            case 3:
                uint uInt;
                break;
            case 4:
                float fLoat;
                break;
            case 11:
                uint flags;
                break;
            case 20:
                uint64 uLong;
                break;
            case 130:
                Align(8);
                uint64 strOffset;
                save = FTell();
                FSeek(strOffset + HeaderSize + header.recordOffset); 
                WString data;
                FSeek(save);
                break;
        }
    }
    recIndex = recIndex + 1;
};

string VarName(uint val)
{
    string s;
    SPrintf(s, "%u", i);
    return s;//columns[i].name;
}

Header header;
FSeek(HeaderSize + header.fieldOffset);
Column columns[header.fieldCount]<optimize=false>;
FSeek(HeaderSize + header.recordOffset);
Record records(header)[header.recordCount]<optimize=false>;
FSeek(HeaderSize + header.lookupOffset);
int lookup[header.maxID];