//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct(int matDescEndPos)
{
    uint16 textureSelectorA;        // points to the texture containing the diffuse, etc
                                    // The value 65535 indicates that no texture is set, it is also
	                                // possible that this value is actually signed and <code>-1</code> is used to
	                                // indicate that the value is not set
    uint16 textureSelectorB;        // points to the texture containing the normals, etc
    int unk0;
    int unk1;
    int unk2;
    int unk3;
    int unk4;
    Track unkTrack018(TFloat, matDescEndPos);   // 4/4
    Track unkTrack030(TFloat, matDescEndPos);   // 4/4
    Track unkTrack048(TFloat, matDescEndPos);   // 4/4
    Track unkTrack060(TFloat, matDescEndPos);   // 4/4
    Track unkTrack078(TFloat, matDescEndPos);   // 4/4
    //Track unkTrack090(TFloat, matDescEndPos);   // 4/4
    byte gap[12];
    int unk;
    byte gap2[8];
    Track unkTrack0A8(TFloat, matDescEndPos);   // 4/4
    Track unkTrack0C0(TFloat, matDescEndPos);   // 4/4
    Track unkTrack0D8(TFloat, matDescEndPos);   // 4/4
    Track unkTrack0F0(TFloat, matDescEndPos);   // 4/4
    Track unkTrack108(TVector3, matDescEndPos);   // 4/12
    int unk5;
    int unk6;
}MATERIALDESCRIPTION;

struct MATERIAL (int index)
{
    int unk0;
    int unk1;
    int unk2;
    int unk3;
    int unk4;
    int unk5;
    int unk6;
    int unk7;
    M3ARRAY materialDescription;
    
    local int matDescEndPos = headerSize + header.materials.offset + (header.materials.elements * 48) + materialDescription.offset + (materialDescription.elements * 296);

    FSeek(headerSize + header.materials.offset + (header.materials.elements * 48) + materialDescription.offset);
    MATERIALDESCRIPTION materialDescriptions(matDescEndPos)[materialDescription.elements]<optimize=false>;
    FSeek(headerSize + header.materials.offset + ((index + 1) * 48));
};

struct MATERIALS (HEADER &header)
{
    local int i;
    for( i = 0; i < header.materials.elements; i++ )
    {
        MATERIAL material(i);
    }
};