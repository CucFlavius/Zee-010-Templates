//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
//------------------------------------------------


// Read null terminated string
typedef struct
{
    string s;
} STRING <name = StringName>;

// Read a string of given size 
typedef struct (int size)
{
    char s[size];
} STRINGc <read = StringCName>;

// Read a string size then string
typedef struct
{
    ushort strSize;
    char s[strSize];
} STRINGd <name = StringDName>;

typedef struct (int size)
{
    wchar_t path[size];
} WSPATH<read = WSPathRead>;

string WSPathRead(WSPATH &str)
{
    if (Strlen(str.path) > 0)
        return str.path;
    else
        return "";
}

// Read null terminated string, with variable name
typedef struct (char nn[])
{
    string s;
    local char n[];
    if (sizeof(nn) > 0)
        n = nn;
    else
        n = " ";
} STRINGn <name = StringNName>;

// Helper function for displaying the string instead of the variable name
string StringName(STRING &str)
{
    if (Strlen(str.s) > 0)
        return "String : " + str.s;
    else
        return "";
}

string StringCName(STRINGc &str)
{
    if (Strlen(str.s) > 0)
        return str.s;
    else
        return "";
}

string StringDName(STRINGd &str)
{
    if (Strlen(str.s) > 0)
        return "String : " + str.s;
    else
        return "";
}

string StringNName(STRINGn &str)
{
    if (Strlen(str.s) > 0)
        return "string " + str.n + " : " + str.s;
    else
        return " ";
}

// Using this to jump to a string pointer, read the string, then go back to where I left off
// Currently only used for diablo 2 resurrected sections
string ReadStringPTR(char name[])
{
    int64 ptr<hidden=true>;
    local long savePos = FTell();
    FSeek(ptr);
    if (sizeof(name) > 0)
        STRINGn str(name);
    FSeek(savePos);

    return str.s;
}