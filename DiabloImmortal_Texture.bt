//------------------------------------------------
//      File: DiabloImmortal_Texture
//   Authors: Zee
//   Version: 1.0
//   Purpose: Reading the texture file format from Diablo Immortal
//  Category: Texture
//------------------------------------------------

//#include "Lib/Common.bt"
#include "Lib/Chunk.bt"

enum<byte> ESamplerFilter
{
    FNone = 0,
    Point = 1,
    Linear = 2,
    Anisotropic = 3
};

enum<byte> ESampleAddress
{
    ANone = 0,
    Wrap = 1,
    Mirror = 2,
    Clamp = 3,
    FromTexture = 4
};

enum<ubyte> EPixelFormat
{
    R32G32B32A32 = 3,
    A16B16G16R16 = 4,
    R8G8B8A8 = 5,
    B5G6R5 = 6,
    A8L8 = 7,
    G16R16 = 8,
    G16R16F = 9,
    G32R32F = 10,
    R16F = 11,
    L8 = 12,
    L16 = 13,
    A8 = 14,
    FloatRGB = 15,
    FloatRGBA = 255, // ??
    D24 = 16,
    D32 = 17,
    BC1 = 18,
    BC2 = 19,
    BC3 = 20,
    BC4 = 21,
    BC5 = 22,
    BC6S = 23,
    BC6U = 24,
    BC7 = 25,
    PVRTC2_RGB = 27,
    PVRTC2_RGBA = 28,
    PVRTC4_RGB = 29,
    PVRTC4_RGBA = 30,
    ETC1 = 31,
    ETC2RGB = 32,
    ETC2RGBA = 33,
    ATC_RGBA_E = 34,
    ATC_RGBA_I = 35,
    ASTC_4x4_LDR = 36,
    ASTC_5x4_LDR = 37,
    ASTC_5x5_LDR = 38,
    ASTC_6x5_LDR = 39,
    ASTC_6x6_LDR = 40,
    ASTC_8x5_LDR = 41,
    ASTC_8x6_LDR = 42,
    ASTC_8x8_LDR = 43,
    ASTC_10x5_LDR = 44,
    ASTC_10x6_LDR = 45,
    ASTC_10x8_LDR = 46,
    ASTC_10x10_LDR = 47,
    ASTC_12x10_LDR = 48,
    ASTC_12x12_LDR = 49,
    ShadowDepth = 50,
    ShadowDepth32 = 51,
    R10G10B10A2 = 52,
    R32U = 53,
    R11G11B10 = 54,
    ASTC_4x4_HDR = 55,
    ASTC_5x4_HDR = 56,
    ASTC_5x5_HDR = 57,
    ASTC_6x5_HDR = 58,
    ASTC_6x6_HDR = 59,
    ASTC_8x5_HDR = 60,
    ASTC_8x6_HDR = 61,
    ASTC_8x8_HDR = 62,
    ASTC_10x5_HDR = 63,
    ASTC_10x6_HDR = 64,
    ASTC_10x8_HDR = 65,
    ASTC_10x10_HDR = 66,
    ASTC_12x10_HDR = 67,
    ASTC_12x12_HDR = 68,
    R32G32B32A32UI = 69
};

enum<ubyte> ESampleQuality
{
    QNone = 0,
    sample2x = 1,
    sample4x = 2,
    sample8x = 3,
};

enum<ubyte> ETextureType
{
    Texture1D = 0,
    Texture2D = 1,
    Texture3D = 2,
    Cube = 3,
    Texture2DArray = 4,
    CubeArray = 5,
    Array = 6,
};

enum<ubyte> ETextureCompression
{
    Default = 0,
    NormalMap = 1,
    DisplacementMap = 2,
    Grayscale = 3,
    HDR = 4,
    NormalMapUncompress = 5,
    NormalMapBC5 = 6,
    VectorMap = 7,
    Uncompressed = 8,
    LightMap = 9,
    EnvMap = 10,
    MixMap = 11,
    UI = 12,
    TerrainBlock = 13,
    TerrainIndex = 14,
    NormalMapCompact = 15,
    cBC6H = 16,
    cBC7 = 17,
    LightProfile = 18,
    LUTHDR = 19,
    LUTLOG = 20,
    TerrainNormalMap = 21,
};

enum<ubyte> ETextureLODGroup
{
    World = 0,
    WorldNormalMap = 1,
    WorldSpecular = 2,
    Character = 3,
    CharacterNormalMap = 4,
    CharacterSpecular = 5,
    Weapon = 6,
    WeaponNormalMap = 7,
    WeaponSpecular = 8,
    Cinematic = 9,
    Effect = 10,
    EffectUnfiltered = 11,
    Sky = 12,
    gUI = 13,
    RenderTarget = 14,
    ShadowMap = 15,
    LUT = 16,
    TerrainBlockMap = 17,
    TerrainIndexMap = 18,
    TerrainLightMap = 19,
    ImageBaseReflection = 20,
};

enum<ubyte> ETextureMipGen
{
    FromTextureGroup = 0,
    Simple = 1,
    Sharpen = 2,
    NoMip = 3,
    Blur = 4,
    AlphaDistribution = 5,
};

typedef struct
{
    ubyte IsSRGB : 1;
    ubyte IsDynamicRange : 1;
    ubyte NoneCompression : 1;
    ubyte CompressionNoAlpha : 1;
    ubyte NoneMipDowngrading : 1;
} FLAGS <name = "Flags", size = 1>;

struct Color4
{
    float r;
    float g;
    float b;
    float a;
};

struct Texture2DInfo   // 40 bytes
{
    ESamplerFilter magFilter;
    ESamplerFilter minFilter;
    ESamplerFilter mipFilter;
    ESampleAddress addressU;
    ESampleAddress addressV;
    EPixelFormat format;
    byte mipLevel;
    FLAGS flags;
    ETextureCompression compressionPreset;
    ETextureLODGroup lodGroup;
    ETextureMipGen mipGenPreset;
    ETextureType textureType;
    short width;
    short height;
    Color4 defaultColor;
    uint size;
    ushort unk;
    ushort sliceCount;
};

struct NNNN
{
    CHUNKID nnnn;
    if (sliceInByte > 0)
    {
        byte data[sliceInByte];
    }
    else
    {
        // Uncompressed
        byte data[width * height * 4];
    }
};

struct ZZZ4
{
    CHUNKID zzz4;
    int uncompressedSize;
    byte data[size - 24];
};

struct TextureSliceInfo
{
    uint size;
    ushort width;
    ushort height;
    ushort depth;
    ushort pitchInByte;
    uint sliceInByte;

    if (match("NNNN")) NNNN textureData;
    else if (match("4ZZZ")) ZZZ4 textureDataLZ4;
};


// Read //

Texture2DInfo header;
TextureSliceInfo slices[header.sliceCount]<optimize=false>;